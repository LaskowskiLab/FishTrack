import sys

#VIDEO_LIST = "path_lists/jay.adults.videos.txt"
#PATH_LIST = 'path_lists/jay.adults.paths.txt'

VIDEO_LIST = "path_lists/jay.sailfins.videos.txt"
PATH_LIST = 'path_lists/jay.sailfins.paths.txt'

#VIDEO_LIST = "path_lists/jay.babies.videos.first.csv"
#PATH_LIST = 'path_lists/jay.babies.paths.first.csv'

with open(VIDEO_LIST) as f:
    VIDEOS = f.read().splitlines()

with open(PATH_LIST) as f:
    BOX_PATHS = f.read().splitlines()

M_CENTERED = "/data/sleapModels/leap.take2.centered_instance.403"
M_CENTROID = "/data/sleapModels/leap.take2.centroid.403"
CENTER_DICT = "/home/ammon/Documents/Scripts/FishTrack/src/center_dicts/center_dict.23.10.02.tsv" 
KEY_TSV = "/data/tracking/jay.babies/pi.babies.key.tsv"
PROJECT_CSV = "/home/ammon/Documents/Scripts/FishTrack/snake/results/jay.babies.csv"

vid_to_path = dict(zip(VIDEOS,BOX_PATHS))

#print('Videos to process:', VIDEOS, file=sys.stderr)

## This is an iffy hack
#shell("conda config --add envs_dirs /home/ammon/anaconda3/envs")

rule all:
    input:
        #expand("snake/videos/{video}.mp4",video=VIDEOS),
        #expand("snake/crops/{video}.crop.mp4",video=VIDEOS),
        expand("snake/exerpts/{video}.5s.mp4",video=VIDEOS),
        expand("snake/sleap/{video}.predictions.slp",video=VIDEOS),
        #expand("snake/sleap/{video}.predictions.squished.slp",video=VIDEOS),
        expand("snake/h5/{video}.h5",video=VIDEOS),
        #expand("snake/results/tracks/{video}.br_detection.npy",video=VIDEOS),
        #expand("snake/results/tracks/{video}.sleap.npy",video=VIDEOS),
        #expand("snake/results/tracks/{video}.combined.npy",video=VIDEOS),
        #expand("snake/results/overlays/{video}.overlay.mp4",video=VIDEOS),
        #expand("snake/results/csv/{video}.csv",video=VIDEOS),
        ## Expand these two to have uploading work
        expand("snake/results/logs/{video}.crop.log",video=VIDEOS),
        expand("snake/results/logs/{video}.sleap.log",video=VIDEOS)

rule copy_video:
    output: temporary("snake/videos/{video}.mp4")
    #output: "snake/videos/{video}.mp4" # good for debug
    params:  
        remote = lambda wildcards: vid_to_path[wildcards.video],
        log = "snake/results/logs/{video}.log"
    resources: bandwidth=1 
    priority: 0
    shell:
        ## Having this as two steps helps deal with some weirdness in downloading
        "bash ~/Documents/Scripts/FishTrack/src/delay_if_full.sh;"
        "rclone copy aperkes:{params.remote}{wildcards.video}.mp4 snake/tmp/;"
        "mv snake/tmp/{wildcards.video}.mp4 snake/videos/{wildcards.video}.mp4;"
        #shell("rclone copy aperkes:{params.remote}{wildcards.video}.mp4 snake/videos/{wildcards.video}.mp4 -P")
        #shell("echo rclone copy aperkes:{params.remote}{wildcards.video}.mp4 snake/videos/{wildcards.video}.mp4")
        #shell("touch snake/videos/{wildcards.video}.mp4")

## Grab 5s exerpt for Jay
rule get_exerpt:
    input:  "snake/videos/{video}.mp4" 
    output: "snake/exerpts/{video}.5s.mp4"
    threads: 4
    shell:
        "ffmpeg -ss 60 -t 5 -i {input} snake/exerpts/{wildcards.video}.5s.mp4 -y -hide_banner -loglevel error;"

rule crop_video:
    output: temporary("snake/crops/{video}.crop.mp4")
    input:  "snake/videos/{video}.mp4" 
    priority: 9
    threads: 4
    conda: "dev"
    params:
        log = "snake/results/logs/{video}.log"
    shell:
        "python /home/ammon/Documents/Scripts/FishTrack/src/crop_by_tags.py -i {input} -x /home/ammon/Documents/Scripts/FishTrack/src/crop_dicts/crop_dict.23.10.02.tsv -m -o snake/crops/{wildcards.video}.crop.mp4 2> {params.log};"
## Use these lines to get shorter crops for quicker processing
        "ffmpeg -ss 60 -i snake/crops/{wildcards.video}.crop.mp4 snake/crops/{wildcards.video}.tmp.mp4 -y -hide_banner -loglevel error;"
        "mv snake/crops/{wildcards.video}.tmp.mp4 snake/crops/{wildcards.video}.crop.mp4;"

rule upload_crop:
    output: "snake/results/logs/{video}.crop.log"
    input:  "snake/crops/{video}.crop.mp4"
    resources: bandwidth=1
    priority: 3
    params:  
        remote = lambda wildcards: vid_to_path[wildcards.video],
        log = "snake/results/logs/{video}.log"
    shell:
        "rclone copy {input} aperkes:{params.remote} 2>> {params.log};"
        "echo uploaded wildcards.video >> snake/results/logs/{wildcards.video}.crop.log;"

rule spot_video:
    output: "snake/results/tracks/{video}.br_detection.npy"
    input:  "snake/crops/{video}.crop.mp4"
    priority: 25 
    conda: "dev"
    params:
        log = "snake/results/logs/{video}.log"
    shell:
        #"conda info --env 2>> {params.log};"
        "python /home/ammon/Documents/Scripts/FishTrack/src/clean_quads_br.py {input} snake/results/tracks/{wildcards.video}.br_detection.npy 2>> {params.log};"
        #"echo python /home/ammon/Documents/Scripts/FishTrack/src/clean_quads_br.py {input} snake/spots/{wildcards.video}.br_detections.npy 2> {params.log};"
        #"touch snake/spots/{wildcards.video}.br_detections.npy"

rule inference:
    #output: temporary("snake/sleap/{video}.predictions.slp")
    output: "snake/sleap/{video}.predictions.slp"
    input:  "snake/crops/{video}.crop.mp4"
    resources: gpu=1
    priority: 100
    threads: 2
    conda:
        "sleap"
    params:
        centered = M_CENTERED,
        centroid = M_CENTROID,
        log = "snake/results/logs/{video}.log"
    shell:
        #shell("sleap-track -i {input} ....")
        #"ulimit -v 28000000;"
        #"sleap-track -m {params.centered} -m {params.centroid} {input} --peak_threshold 0.7 --tracking.tracker simple --tracking.target_instance_count 8 --tracking.pre_cull_to_target 1 --tracking.similarity centroid --tracking.track_window 5 -o snake/sleap/{wildcards.video}.predictions.slp 2>> {params.log};"
        "sleap-track -m {params.centered} -m {params.centroid} {input} --peak_threshold 0.7 --tracking.tracker simplemaxtracks --tracking.max_tracking 1 --tracking.max_tracks 8 --tracking.target_instance_count 8 --tracking.pre_cull_to_target 1 --tracking.similarity centroid --tracking.track_window 5 -o snake/sleap/{wildcards.video}.predictions.slp 2>> {params.log};"
        #"echo sleap-track -m params.centered -m params.centroid --peak_threshold 0.4 {input} -o snake/sleap/{wildcards.video}.predictions.slp"
        #"touch snake/sleap/{wildcards.video}.predictions.slp"

rule tidy_slp:
    output: temporary("snake/sleap/{video}.predictions.squished.slp")
    input: "snake/sleap/{video}.predictions.slp"
    priority: 90 
    threads: 2
    params:
        log = "snake/results/logs/{video}.log"
    conda: "sleap"
    shell:
        "python /home/ammon/Documents/Scripts/FishTrack/src/squish_sleap.py {input} 2>> {params.log};"

rule convert_h5:
    output: temporary("snake/h5/{video}.h5")
    input:  "snake/sleap/{video}.predictions.squished.slp"
    priority: 91 
    threads: 2
    params:
        log = "snake/results/logs/{video}.log"
    conda:
        "sleap"
    shell:
        "sleap-convert {input} --format analysis -o snake/h5/{wildcards.video}.h5 2>> {params.log};"
        #"echo sleap-convert {input} --format analysis -o snake/h5/{wildcards.video}.h5"
        #"touch snake/h5/{wildcards.video}.h5"

rule upload_slp_files:
    output: "snake/results/logs/{video}.sleap.log"
    input:  
        h5 = "snake/h5/{video}.h5",
        sleap = "snake/sleap/{video}.predictions.slp"
    resources: bandwidth=1
    priority: 3 
    params:  
        remote = lambda wildcards: vid_to_path[wildcards.video],
        log = "snake/results/logs/{video}.log"
    shell:
        "rclone copy {input.h5} aperkes:{params.remote}{wildcards.video}.h5 2>> {params.log};"
        "rclone copy {input.sleap} aperkes:{params.remote}{wildcards.video}.predictions.slp 2>> {params.log};"

        #shell("echo rclone copy {input} aperkes:{params.remote}{wildcards.video}.h5")
        "echo uploaded {wildcards.video} > snake/results/logs/{wildcards.video}.sleap.log;"

rule quad_h5:
    output: 
        "snake/results/tracks/{video}.sleap.npy",
    input:  "snake/h5/{video}.h5"
    priority: 27 
    conda: "dev"
    params:
        center = CENTER_DICT,
        log = "snake/results/logs/{video}.log"
    shell:
        "python /home/ammon/Documents/Scripts/FishTrack/src/clean_quads_h5.py -i {input} -o snake/results/tracks/{wildcards.video}.sleap.npy -x {params.center} 2>> {params.log};"

rule viterbi:
    output:
        "snake/results/tracks/{video}.combined.npy"
    input:  
        sleap_track = "snake/results/tracks/{video}.sleap.npy",
        br_track = "snake/results/tracks/{video}.br_detection.npy"
    priority: 28 
    conda: "dev"
    params:
        center = CENTER_DICT,
        log = "snake/results/logs/{video}.log"
    shell:
        "python /home/ammon/Documents/Scripts/FishTrack/src/viterbi.py -a {input.sleap_track} -b {input.br_track} -o snake/results/tracks/{wildcards.video}.combined.npy -x {params.center} 2>> {params.log};"

rule quantify_track:
    output:
        "snake/results/csv/{video}.csv"
    input: "snake/results/tracks/{video}.combined.npy"
    priority: 29
    conda: "dev"
    params:
        center = CENTER_DICT,
        key = KEY_TSV,
        log = "snake/results/logs/{video}.log"
    shell:
        "python /home/ammon/Documents/Scripts/FishTrack/src/quantify_track.py -i {input} -o snake/results/csv/{wildcards.video}.csv -p snake/results/jay.babies.csv -x {params.center} -k {params.key} 2>> {params.log};"

rule overlay_track:
    output:
        "snake/results/overlays/{video}.overlay.mp4"
    input:
        track = "snake/results/tracks/{video}.combined.npy",
        video = "snake/crops/{video}.crop.mp4"
    params:
        log = "snake/results/logs/{video}.log"
    priority: 30
    conda: "dev"
    shell:
        "python /home/ammon/Documents/Scripts/FishTrack/src/overlay_track.py -i {input.video} -t {input.track} -o snake/results/overlays/{wildcards.video}.overlay.big.mp4 2>> {params.log};"
        "ffmpeg -i snake/results/overlays/{wildcards.video}.overlay.big.mp4 -t 120 snake/results/overlays/{wildcards.video}.overlay.mp4 -y 2>> {params.log};"
        "rm snake/results/overlays/{wildcards.video}.overlay.big.mp4 2>> {params.log};"
