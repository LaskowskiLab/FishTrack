import sys

with open('vid_inbox.txt') as f:
    VIDEOS = f.read().splitlines()

with open('inbox_paths.txt') as f:
    BOX_PATHS = f.read().splitlines()

vid_to_path = dict(zip(VIDEOS,BOX_PATHS))

print('Videos to process:', VIDEOS, file=sys.stderr)

rule all:
    input:
        expand("../working_dir/videos/{video}.mp4",video=VIDEOS),
        expand("../working_dir/crops/{video}.crop.mp4",video=VIDEOS),
        expand("../working_dir/spots/{video}.spot.mp4",video=VIDEOS),
        expand("../working_dir/sleap/{video}.slp",video=VIDEOS),
        expand("../working_dir/h5/{video}.h5",video=VIDEOS),
        expand("../results/csv/{video}.csv",video=VIDEOS),
        expand("../results/txt/{video}.txt",video=VIDEOS),
        expand("{video}.log",video=VIDEOS),

rule copy_video:
    output: temporary("../working_dir/videos/{video}.mp4")
    params:  
         remote = lambda wildcards: vid_to_path[wildcards.video]
    threads: 2
    run:
        #shell("rclone copy {input.test}{videos}.mp4 ../working_dir/videos/{videos}.mp4")
        shell("echo rclone copy aperkes:{params.remote}{wildcards.video}.mp4 ../working_dir/videos/{wildcards.video}.mp4")
        shell("touch ../working_dir/videos/{wildcards.video}.mp4")

rule crop_video:
    output: temporary("../working_dir/crops/{video}.crop.mp4")
    input:  "../working_dir/videos/{video}.mp4" 
    threads: 4
    run:
        #shell("python crop_by_dict.py -i {input}")
        shell("echo python crop_by_dict.py -i {input}")
        shell("touch ../working_dir/crops/{wildcards.video}.crop.mp4")

rule upload_crop:
    input:  "../working_dir/crops/{video}.crop.mp4"
    threads: 1
    run:
        #shell("rclone copy {input} {remote}.crop.mp4")
        shell("echo rclone copy {input} {remote}.crop.mp4")

rule spot_video:
    output: temporary("../working_dir/spots/{video}.spot.mp4")
    threads: 4
    input:  "../working_dir/crops/{video}.crop.mp4"
    conda:
        "tracking"
    shell:
        #shell("python spotlight.py {input}")
        "echo python spotlight.py {input};"
        "touch ../working_dir/spots/{wildcards.video}.spot.mp4"

rule upload_spot:
    input:  "../working_dir/spots/{video}.spot.mp4"
    threads: 1
    run:
        #shell("rclone copy {input} {remote}.spot.mp4")        
        shell("echo rclone copy {input} {remote}.spot.mp4")        

rule inference:
    output: temporary("../working_dir/sleap/{video}.slp")
    input:  "../working_dir/spots/{video}.spot.mp4"
    threads: 1
    conda:
        "sleap"
    shell:
        #shell("sleap-track -i {input} ....")
        "echo sleap-track -i {input} ....;"
        "touch ../working_dir/sleap/{wildcards.video}.slp"

rule convert_h5:
    output: temporary("../working_dir/h5/{video}.h5")
    input:  "../working_dir/sleap/{video}.slp"

    conda:
        "sleap"
    shell:
        #"sleap-convert -i {input} .... "
        "echo sleap-convert -i {input} ....; "
        "touch ../working_dir/h5/{wildcards.video}.h5"

rule upload_h5:
    output: "{video}.log"
    input:  "../working_dir/h5/{video}.h5"
    threads: 1
    params:  
         remote = lambda wildcards: vid_to_path[wildcards.video]
    run:
        #shell("rclone copy aperkes:{remote}{wildcards.video}.h5")
        shell("echo rclone copy {input} aperkes:{params.remote}{wildcards.video}.h5")
        shell("echo wildcards.video > {wildcards.video}.log")

rule process_h5:
    output: 
        "../results/csv/{video}.csv",
        "../results/txt/{video}.txt",
    input:  "../working_dir/h5/{video}.h5"
    run:
        #shell("python process_h5.py -i {input}")
        shell("echo python process_h5.py -i {input};")
        shell("touch ../results/csv/{wildcards.video}.csv")
        shell("touch ../results/txt/{wildcards.video}.txt")
